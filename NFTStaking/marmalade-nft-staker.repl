(load "dependencies/dependencies.repl")

(begin-tx)
(env-keys ["person1", "person2", "person3", "mint", "burn", "sale", "transfer"])
(env-data 
  { 
    "person1-keyset": { "keys": ["person1"], "pred": "="},
    "person2-keyset": { "keys": ["person2"], "pred": "="},
    "person3-keyset": { "keys": ["person3"], "pred": "="},
    "mint-guard": ["mint"],
    "burn-guard": ["burn"],
    "sale-guard": ["sale"],
    "transfer-guard": ["transfer"],
    "init": true
  })
(env-sigs
  [{
    "key": "mint",
    "caps": [
      (marmalade.ledger.MINT "token" "person1" 2.0)
    ]
  }])

(load "marmalade-nft-staker.pact")

(commit-tx)

(begin-tx)
(env-chain-data { "block-time": (time "2000-01-01T00:00:00Z") })

(use free.marmalade-nft-staker)

;; Can create a stakable nft and access values
(env-keys ["person2"])
(env-data 
  { 
    "person2-keyset": { "keys": ["person2"], "pred": "="}
  })
(env-sigs
  [{
    "key": "person2",
    "caps": [
      (coin.TRANSFER "person2" "bank" 5000.0)
      (coin.TRANSFER "bank" "person2" 2500.0)
      (free.marmalade-nft-staker.WITHDRAW "pool1")
    ]
  }])
(create-stakable-nft 
  "pool1"
  "token"
  coin
  "bank"
  "escrow"
  0.1
  1000.0
  60.0
  (read-keyset "person2-keyset"))
(expect-that "apy is correct"
  (= 0.1)
  (get-current-apy "pool1")
)

;; Transfer funds into and out of bank
(install-capability (coin.TRANSFER "person2" "bank" 5000.0))
(coin.transfer "person2" "bank" 5000.0)
(expect-that "5000 in the bank"
  (= 5000.0)
  (at "balance" (coin.details "bank"))
)
(expect-that "Withdraw 2500 from bank"
  (= "Withdrew 2500.0 coins from bank")
  (withdraw-from-bank "pool1" "person2" 2500.0)
)
(expect-that "2500 in the bank"
  (= 2500.0)
  (at "balance" (coin.details "bank"))
)

;; Staking works, and can't stake if you already have tokens staked
(env-keys ["person1"])
(env-data 
  { 
    "person1-keyset": { "keys": ["person1"], "pred": "="}
  })
(env-sigs
  [{
    "key": "person1",
    "caps": [
      ;  (free.marmalade-nft-staker.STAKE "person1" "escrow" "token" 1.0),
      (free.marmalade-nft-staker.UNSTAKE "person1" "escrow" (read-keyset "person1-keyset") "token"),
      (marmalade.ledger.TRANSFER "token" "person1" "escrow" 2.0),
      (coin.TRANSFER "bank" "person1" 2500.0)
    ]
  }])
(stake "person1" (read-keyset "person1-keyset") "pool1" "token" 2.0)
(expect-that "1 token in balance"
  (= 1.0)
  (at "balance" (marmalade.ledger.details "token" "person1"))
)
(expect-that "2 tokens staked"
  (= 2.0)
  (get-staked-for-pool "pool1" "person1")
)
(expect-failure "Staking with something already there fails"
  (stake "person1" (read-keyset "person1-keyset") "pool1" "token" 1.0)
)

;; Must wait for lock-time before you can unstake
(expect-failure "Wait for lock time to unstake"
  (unstake "person1" "pool1" "token")
)

;; Calculating my rewards works
(env-chain-data { "block-time": (time "2000-12-31T00:00:00Z") })
(expect-that "365 days accrued: 100 * 2 (tokens) coins gained"
  (= 200.0)
  (get-claimable-tokens "pool1" "person1")
)

;; Unstaking works as expected, fails to unstake if there is nothing staked
(unstake "person1" "pool1" "token")
(expect-that "person1 has his tokens back"
  (= 3.0)
  (at "balance" (marmalade.ledger.details "token" "person1"))
)
(expect-that "0 tokens staked"
  (= 0.0)
  (get-staked-for-pool "pool1" "person1")
)
(expect-that "200 coins recieved"
  (= 10200.0)
  (at "balance" (coin.details "person1"))
)
(expect-failure "Unstaking with nothing there fails"
  (unstake "person1" "pool1" "token")
)

(commit-tx)



(begin-tx)
(use free.marmalade-nft-staker)

;; Stake a token
(env-keys ["person1"])
(env-data 
  { 
    "person1-keyset": { "keys": ["person1"], "pred": "="}
  })
(env-sigs
  [{
    "key": "person1",
    "caps": [
      (free.marmalade-nft-staker.UNSTAKE "person1" "escrow" (read-keyset "person1-keyset") "token"),
      (marmalade.ledger.TRANSFER "token" "person1" "escrow" 1.0)
    ]
  }])
(stake "person1" (read-keyset "person1-keyset") "pool1" "token" 1.0)

;; Person 3 can't withdraw from bank (person2) nor unstake for person 1
(env-keys ["person3"])
(env-data 
  { 
    "person3-keyset": { "keys": ["person3"], "pred": "="}
  })
(env-sigs
  [{
    "key": "person3",
    "caps": [
      ;  (free.marmalade-nft-staker.UNSTAKE "person1" "escrow" (read-keyset "person1-keyset") "token"),
      (marmalade.ledger.TRANSFER "token" "person3" "escrow" 1.0)
    ]
  }])

(expect-failure "Unstaking for someone else fails"
  (unstake "person1" "pool1" "token")  
)

(expect-failure "Withdraw from pool bank fails"
  (withdraw-from-bank "pool1" "person3" 100.0)
)

(commit-tx)